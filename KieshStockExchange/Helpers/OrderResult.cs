using KieshStockExchange.Models;

namespace KieshStockExchange.Helpers;

/// <summary>
/// Indicates the outcome of an order placement attempt.
/// </summary>
public enum OrderStatus
{
    Success,
    NotAuthenticated,
    InvalidParameters,
    PriceTooLow,
    PriceTooHigh,
    InsufficientStocks,
    InsufficientFunds,
    NoMarketPrice,
    AlreadyClosed,
    NotAuthorized,
    OperationFailed,
    PartialFill,
}

/// <summary>
/// Detailed result for a buy or sell order:
/// - <see cref="Status"/> tells you if it succeeded or why it failed.
/// - <see cref="FillTransactions"/> holds any Transaction records created by fills.
/// </summary>
public class OrderResult
{
    /// <summary>Reason the order did—or did not—go through.</summary>
    public OrderStatus Status { get; set; }

    /// <summary>
    /// The original order you handed to the market/user service.
    /// This will have its Quantity adjusted down by any fills
    /// (so you can see how much is still resting, if any).
    /// </summary>
    public Order? PlacedOrder { get; set; }

    /// <summary>
    /// All individual trade transactions generated by matching.
    /// Empty if the order went straight on‐book (e.g. an unfilled limit).
    /// </summary>
    public IReadOnlyList<Transaction> FillTransactions { get; set; }
        = Array.Empty<Transaction>();

    /// <summary>Total shares/contracts actually filled.</summary>
    public int TotalFilledQuantity
        => FillTransactions.Sum(tx => tx.Quantity);

    /// <summary>Weighted‐average price across all fills; zero if nothing filled.</summary>
    public decimal AverageFillPrice
        => TotalFilledQuantity > 0
           ? FillTransactions.Sum(tx => tx.Price * tx.Quantity) / TotalFilledQuantity
           : 0m;

    /// <summary>
    /// For orders that go on‐book (limit orders, partial fills),
    /// this is the remaining quantity still outstanding.
    /// </summary>
    public int RemainingQuantity
        => PlacedOrder?.Quantity ?? 0;

    /// <summary>
    /// If you create a new resting order (e.g. an unfilled limit),
    /// this is its database‐assigned ID so the UI can reference/cancel it later.
    /// </summary>
    public int? NewOrderId
        => PlacedOrder?.OrderId > 0 ? PlacedOrder.OrderId : null;

    /// <summary>
    /// (Optional) A human‐readable message for display/logging,
    /// useful when Status!=Success to explain what went wrong.
    /// </summary>
    public string? Message { get; set; }
}